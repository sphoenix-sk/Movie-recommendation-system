# -*- coding: utf-8 -*-
"""movie-recommendation-system.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GVFTMJowzxkJ6nVUDZdk_f-cfLz_72Vp
"""

import pandas as pd
import numpy as np

credits = pd.read_csv('/content/tmdb_5000_credits.csv.zip')

credits.shape

credits.head()

movies = pd.read_csv('/content/tmdb_5000_movies.csv.zip')

movies.shape

movies.head()

movies = movies.merge(credits,on='title')

movies.head(1)

#genres
 #id
 #keywords
 #title
 #overview
 #cast
 #crew

movies = movies[['movie_id', 'title', 'overview', 'genres', 'keywords', 'cast', 'crew']]

movies.head(2)

movies.isnull().sum()

movies.dropna(inplace=True)

movies.duplicated().sum()

movies.iloc[0].genres

import ast

def convert(obj):
  l = []
  for i in ast.literal_eval(obj):
    l.append(i['name'])
  return l

movies['genres'] = movies['genres'].apply(convert)
movies.head(1)

movies['keywords'] = movies['keywords'].apply(convert)
movies.head(1)

def convert3(obj):
  l = []
  counter=0
  for i in ast.literal_eval(obj):
    if counter != 3:
      l.append(i['name'])
      counter+=1
    else:
      break
  return l


movies['cast'] = movies['cast'].apply(convert3)
movies.head(3)

movies['crew'][0]

#job = director

def fetch_director(obj):
  l = []
  for i in ast.literal_eval(obj):
    if i['job'] == 'Director':
      l.append(i['name'])
      break
  return l

movies['crew'] = movies['crew'].apply(fetch_director)
movies.head(3)

#overview = string--->list

movies['overview'] = movies['overview'].apply(lambda x:x.split())

movies.head()

#"Sam Worthington" ---> "SamWorthington"

movies['genres'] = movies['genres'].apply(lambda x:[i.replace(" ","") for i in x])
movies['keywords'] = movies['keywords'].apply(lambda x:[i.replace(" ","") for i in x])
movies['cast'] = movies['cast'].apply(lambda x:[i.replace(" ","") for i in x])
movies['crew'] = movies['crew'].apply(lambda x:[i.replace(" ","") for i in x])

movies.head(3)

movies['tags'] = movies['overview'] + movies['genres'] + movies['keywords'] + movies['cast'] + movies['crew']

movies.head()

new_df = movies[['movie_id', 'title', 'tags']]
new_df

new_df['tags'] = new_df['tags'].apply(lambda x:" ".join(x))
new_df.head(3)

new_df['tags'][0]

new_df['tags'] = new_df['tags'].apply(lambda x:x.lower())
new_df.head()

#[loves, loving, love] --> love

import nltk

!pip install nltk

from nltk.stem.porter import PorterStemmer
ps = PorterStemmer()

def stem(text):
  y = []
  for i in text.split():
    y.append(ps.stem(i))
  
  return " ".join(y)

new_df['tags'] = new_df['tags'].apply(stem)
new_df

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features = 5000, stop_words = 'english')

vectors = cv.fit_transform(new_df['tags']).toarray()

vectors

cv.get_feature_names()

#cosine distance

from sklearn.metrics.pairwise import cosine_similarity

similarity_array = cosine_similarity(vectors)

cosine_similarity(vectors).shape

similarity_array[0]

def recommend(movie):
  movie_index = new_df[new_df['title'] == movie].index[0]
  distances = similarity_array[movie_index]
  movies_list = sorted(list(enumerate(distances)), reverse=True, key=lambda x:x[1])[1:8]

  for i in movies_list:
    print(new_df.iloc[i[0]].title)

recommend('Avatar')

new_df.iloc[1216].title

import pickle

pickle.dump(new_df, open('movies_name.pkl','wb'))

pickle.dump(similarity_array, open('similarity_array.pkl','wb'))

